

/*
 * callbacks.cpp -- part of the WorkshopBot project.
 * Implementation of callbacks -- YOUR code goes here!
 * Nitin Vinayak Agrawal
 * Robocon 
 * 
 * Copyright (C) 2017 Nitin Vinayak Agrawal
 * 
 * Generated by DruidBuilder [https://devicedruid.com/], 
 * as part of project "4627378837c8449eaff9a98bd9bcae72tGPsyZXBln",
 * aka WorkshopBot.
 * 
 * Druid4Arduino, Device Druid, Druid Builder, the builder 
 * code brewery and its wizards, SerialUI and supporting 
 * libraries, as well as the generated parts of this program 
 * are 
 *            Copyright (C) 2013-2017 Pat Deegan 
 * [http://psychogenic.com/ | http://flyingcarsandstuff.com/]
 * and distributed under the terms of their respective licenses.
 * See http://devicedruid.com for details.
 * 
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
 * THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE 
 * PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, 
 * YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR
 * CORRECTION.
 * 
 * Keep in mind that there is no warranty and you are solely 
 * responsible for the use of all these cool tools.
 * 
 * Play safe, have fun.
 * 
 */


/* we need the SerialUI lib */
#include <SerialUI.h>
#include "WorkshopBotSettings.h"

/* our project specific types and functions are here */
#include "WorkshopBot.h"



/* 
 * In addition to any custom globals you declared,
 * here you have access to:
 * 
 * *** MySUI -- the SerialUI instance.
 * Use it as you would the Serial device, e.g.
 * 	MySUI.println(F("Helloooo..."));
 * 	
 * 	
 * *** MyInputs -- a container for 
 * values submitted by users. Contents:
 *  
 *    MyInputs.Forward (long int)
 *    MyInputs.Turn (long int)
 *    MyInputs.ServoDir (long int)
 *  
 *  
 *  
 * *** MyTracked -- a container for values tracked
 * by druid and displayed to users in "state" pane.  Changes to:
 * 
 *    MyTracked.Distance (unsigned long)
 * 
 * will automatically be reported to the UI, on the next refresh/ping.
 * 
 * 
 */

// custom declarations
Servo myservo;
int motorR1= 3, motorR2=5 , motorL1=9 , motorL2=6;
int powpin=8;
int trigpin=12;
int echopin=13;
long duration;
int distance;




/* ********* callbacks and validation functions ********* */



/* *** Main Menu *** */
namespace MainMenu {


void ForwardChanged() {
if(MyInputs.Forward>0)
{
    analogWrite(motorR1, MyInputs.Forward);
    analogWrite(motorL1, MyInputs.Forward);
    analogWrite(motorR2, 0);
    analogWrite(motorL2, 0);
}
if(MyInputs.Forward<0)
{
    analogWrite(motorR1, 0);
    analogWrite(motorL1, 0);
    analogWrite(motorR2, -MyInputs.Forward);
    analogWrite(motorL2, -MyInputs.Forward);
}
}

void TurnChanged() {
if(MyInputs.Turn>0)
{
    analogWrite(motorR1, MyInputs.Turn);
    analogWrite(motorL1, 0);
    analogWrite(motorR2, 0);
    analogWrite(motorL2, MyInputs.Turn);
}
if(MyInputs.Turn<0)
{
    analogWrite(motorR1, -MyInputs.Turn);
    analogWrite(motorL1, 0);
    analogWrite(motorR2, 0);
    analogWrite(motorL2, -MyInputs.Turn);
}
}

void ServoDirChanged() {
   int pos=MyInputs.ServoDir;
   pos=map(pos,-90,90,255,0);
   myservo.write(pos);
}





} /* namespace MainMenu */





