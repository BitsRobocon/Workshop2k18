
#ifndef _WorkshopBot_WorkshopBot_h
#define _WorkshopBot_WorkshopBot_h


/*
 * WorkshopBot.h -- part of the WorkshopBot project.
 * Declarations for everything that was generated...
 * Nitin Vinayak Agrawal
 * Robocon 
 * 
 * Copyright (C) 2017 Nitin Vinayak Agrawal
 * 
 * Generated by DruidBuilder [https://devicedruid.com/], 
 * as part of project "4627378837c8449eaff9a98bd9bcae72tGPsyZXBln",
 * aka WorkshopBot.
 * 
 * Druid4Arduino, Device Druid, Druid Builder, the builder 
 * code brewery and its wizards, SerialUI and supporting 
 * libraries, as well as the generated parts of this program 
 * are 
 *            Copyright (C) 2013-2017 Pat Deegan 
 * [http://psychogenic.com/ | http://flyingcarsandstuff.com/]
 * and distributed under the terms of their respective licenses.
 * See http://devicedruid.com for details.
 * 
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
 * THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE 
 * PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, 
 * YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR
 * CORRECTION.
 * 
 * Keep in mind that there is no warranty and you are solely 
 * responsible for the use of all these cool tools.
 * 
 * Play safe, have fun.
 * 
 */



/* we need the SerialUI lib */
#include <SerialUI.h>


/* MySUI
 * Our SerialUI Instance, through which we can send/receive
 * data from users.
 */ 
extern SUI::SerialUI MySUI;

/* custom global scope definitions: */
#include <Servo.h> 




// automatically generated declarations (from global scope declarations)

extern Servo myservo;

extern int motorR1;

extern int powpin;

extern int trigpin;

extern int echopin;

extern long duration;

extern int distance;
void ultsnd()
{
  digitalWrite(trigpin,LOW);
  delayMicroseconds(2);
  digitalWrite(trigpin,HIGH);
  delayMicroseconds(10);
  digitalWrite(trigpin,LOW);
  
  duration=pulseIn(echopin,HIGH);
  distance=(duration/2)/29;

  Serial.print("Distance: ");
  Serial.println(distance);
 
  
}


/*
 * The container for MyInputs, which
 * holds all the variables for the various inputs.
 */
typedef struct MyInputsContainerStruct {
	
	long int Forward;
	long int Turn;
	long int ServoDir;
	// constructor to set sane startup vals
	MyInputsContainerStruct() : 
		Forward(0),
		Turn(0),
		ServoDir(0)
	{}
} MyInputsContainerSt;

extern MyInputsContainerSt MyInputs;


/* MyTracked
 * A structure to hold the tracked variables, which will 
 * automatically update the druid UI when modified by this 
 * program.
 */
typedef struct MyTrackedVarsContainerStruct{
	
	unsigned long Distance;
	// constructor to set sane startup vals
	MyTrackedVarsContainerStruct() : 
	Distance(0)
	{}
} MyTrackedVarsContainerSt;

extern MyTrackedVarsContainerSt MyTracked;




/* ********* callbacks and validation functions ********* */



/* *** Main Menu *** */
namespace MainMenu {

void ForwardChanged();

void TurnChanged();

void ServoDirChanged();

} /* namespace MainMenu */



/* ***** SetupSerialUI: where we'll be setting up menus and such **** */
bool SetupSerialUI();


#define DIE_HORRIBLY(msg)	for(;;){ MySUI.println(msg); delay(1000); }


#endif
